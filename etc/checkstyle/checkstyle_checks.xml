<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: Fuava-SimpleBatch-Checks
    Description: none
-->
<module name="Checker">
    <property name="severity" value="warning"/>
    <property name="charset" value="UTF-8"/>
    <module name="TreeWalker">
        <property name="tabWidth" value="4"/>
        <module name="FileContentsHolder"/>
        <module name="BooleanExpressionComplexity">
            <property name="max" value="5"/>
        </module>
        <module name="ConstantName"/>
        <module name="AnonInnerLength">
            <property name="max" value="100"/>
        </module>
        <module name="ArrayTypeStyle"/>
        <module name="AvoidInlineConditionals">
            <property name="severity" value="ignore"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <module name="AvoidNestedBlocks"/>
        <module name="AvoidStaticImport">
            <property name="excludes"
                      value="org.mockito.Mockito.*,org.testng.Assert.*,org.mockito.Matchers.*,org.hamcrest.MatcherAssert.*,org.hamcrest.Matchers.*,org.mockito.BDDMockito.*"/>
        </module>
        <module name="CovariantEquals"/>
        <module name="DeclarationOrder"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyBlock">
            <property name="tokens" value="LITERAL_DO, LITERAL_FINALLY, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, STATIC_INIT"/>
        </module>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH, LITERAL_ELSE, LITERAL_IF, INSTANCE_INIT"/>
        </module>
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>
        <module name="EqualsHashCode"/>
        <module name="EmptyStatement"/>
        <module name="FallThrough"/>
        <module name="FinalLocalVariable">
            <property name="tokens" value="PARAMETER_DEF,VARIABLE_DEF"/>
        </module>
        <module name="FinalParameters">
            <property name="tokens" value="METHOD_DEF,CTOR_DEF,LITERAL_CATCH"/>
        </module>
        <!-- module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module -->
        <!-- module name="HideUtilityClassConstructor"/ -->
        <module name="IllegalImport"/>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        <module name="InnerAssignment"/>
        <module name="JavadocType">
            <property name="authorFormat" value="\S"/>
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true"/>
        </module>
        <module name="JavadocVariable">
            <property name="severity" value="ignore"/>
            <property name="scope" value="public"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <module name="JavaNCSS">
            <property name="methodMaximum" value="30"/>
            <property name="classMaximum" value="750"/>
            <property name="fileMaximum" value="1500"/>
        </module>
        <module name="JUnitTestCase">
            <property name="severity" value="ignore"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <module name="LeftCurly">
            <property name="maxLineLength" value="200"/>
        </module>
        <module name="LineLength">
            <property name="ignorePattern" value="^ *\* *[^ ]+$|^ *@.*|^import"/>
            <property name="max" value="200"/>
            <property name="tabWidth" value="4"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MagicNumber">
            <property name="severity" value="ignore"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="200"/>
        </module>
        <module name="MethodName"/>
        <module name="MethodParamPad"/>
        <module name="ModifiedControlVariable"/>
        <module name="ModifierOrder"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="MutableException"/>
        <module name="NeedBraces"/>
        <module name="NestedIfDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens" value="DOT"/>
        </module>
        <module name="NPathComplexity"/>
        <module name="OperatorWrap">
            <property name="option" value="eol"/>
            <property name="tokens"
                      value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
        </module>
        <module name="PackageDeclaration"/>
        <module name="PackageName">
            <property name="format"
                      value="^de\.[a-z][a-z0-9]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$|^test$|^com\.freiheit\.[a-z][a-z0-9]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>
        <module name="ParameterAssignment"/>
        <module name="ParameterName"/>
        <module name="ParameterNumber"/>
        <module name="ParenPad">
            <property name="option" value="space"/>
            <property name="tokens" value="CTOR_CALL,METHOD_CALL,LPAREN,RPAREN,SUPER_CTOR_CALL"/>
        </module>
        <module name="RedundantImport"/>
        <module name="RedundantModifier">
            <property name="tokens" value="VARIABLE_DEF,ANNOTATION_FIELD_DEF"/>
        </module>
        <module name="Regexp">
            <property name="format" value="printStackTrace|System\.out\.print|System\.err\.print"/>
            <property name="message" value="Print Methode"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RightCurly"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StaticVariableName"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="TypecastParenPad"/>
        <module name="TypeName"/>
        <module name="UnusedImports"/>
        <module name="UpperEll"/>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
            <property name="publicMemberPattern" value="^.*$"/>
        </module>
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA,SEMI"/>
        </module>
        <module name="WhitespaceAround">
            <property name="tokens"
                      value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,LITERAL_ASSERT,TYPE_EXTENSION_AND"/>
        </module>
        <module name="ParameterAssignment"/>
        <module name="RedundantModifier"/>
        <module name="Regexp">
            <property name="format" value="@Transactional *\n *public *class"/>
            <property name="message" value="Do not use @Transactional at class level. Directly annotate single methods instead."/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="import\s+org\.junit"/>
            <property name="message" value="Do not use JUnit directly, use the corresponding TestNG classes instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="import\s+com\.esotericsoftware\.minlog\.Log"/>
            <property name="message"
                      value="You do not really want this logger, you actually mean org.slf4j.LoggerFactory.getLogger(Class)"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="import\s+junit\."/>
            <property name="message" value="Do not use JUnit directly, use the corresponding TestNG classes instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+java\.util\.Date"/>
            <property name="message" value="java.util.Date should not be used. Use DateTime of Joda Time instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+java\.util\.Calendar"/>
            <property name="message" value="java.util.Calendar should not be used. Use DateTime of Joda Time instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+java\.text\.DateFormat\W"/>
            <property name="message" value="java.text.DateFormat should not be used. Use DateTimeFormatter of Joda Time instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+org\.apache\.commons\.logging\.LogFactory"/>
            <property name="message" value="Bitte nicht commons-logging sondern slf4j verwenden"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="import\s+org\.apache\.wicket\.markup\.IMarkupCacheKeyProvider"/>
            <property name="message"
                      value="Do not implement IMarkupCacheKeyProvider directly, use the base class AbstractSelfRenderingPanel instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+org\.testng\.internal\.annotations\.Maps"/>
            <property name="message" value="Likely not the Maps class you're looking for."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+org\.apache\.commons\.logging\.Log"/>
            <property name="message" value="Please use slf4j instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+org\.apache\.cxf\.helpers\.IOUtils"/>
            <property name="message" value="Please use org.apache.commons.io.IOUtils."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+org\.apache\.poi\.util\.IOUtils"/>
            <property name="message" value="Please use org.apache.commons.io.IOUtils."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="TODO Auto-generated"/>
            <property name="message" value="Please provide a reasonable comment to your auto-generated."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="([a-z][a-zA-Z0-9_]*)\.set([a-zA-Z0-9_]+)\(\s*\1\.get\2\(\)\s*\);"/>
            <property name="message" value="Nutzlose Zuweisung: Setter wird mit eigenem Getter aufgerufen."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="severity" value="error"/>
            <property name="format" value="Mutable([A-z][a-zA-Z0-9_]*)\(\s*@Nonnull\s+final\s+\1\s+[a-zA-Z0-9]+\s*\)\s*\{"/>
            <property name="message" value="Copy-Konstruktor: Stattdessen ImmutableToMutable-Converter verwenden!"/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="edu\.umd\.cs\.findbugs\.util\.Strings"/>
            <property name="message" value="Please do not use findbugs Strings."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format"
                      value="static((\s+final\s+)|(\s+))(NumberFormat|ChoiceFormat|DecimalFormat|SimpleDateFormat|DateFormat)\s*[;=]"/>
            <property name="message"
                      value="JDK Format classes are not thread safe. Usage is likely to be wrong here."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!-- Checkstyle ist nicht dafür da um TODOs erkenntlich zu machen
        <module name="RegexpSinglelineJava">
            <property name="format" value="(javax\.validation|javax\.xml\.bind|org\.quartz\.xml|org\.owasp\.esapi\.errors|scala\.xml\.dtd)\.ValidationException"/>
            <property name="message" value="?.ValidationException ist vermutlich die falsche, nimm doch com.freiheit.exception.ValidationException die wird auch gefangen" />
            <property name="ignoreComments" value="true"/>
            <property name="severity" value="INFO"/>
        </module>
        -->
        <module name="Regexp">
            <property name="format" value="/\*(\*\s*)*\{@inheritDoc\}\s*(\*\s*)*\*/"/>
            <property name="message" value="please just write @Override"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="Regexp">
            <property name="format" value="((@param\s+\S*)|(@throws\s+\S*)|(@return))\s*\*((\s*@)|/|(\s*\*))"/>
            <property name="message" value="Please provide a reasonable comment."/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="Regexp">
            <property name="format" value="non-Javadoc"/>
            <property name="message" value="Please write JavaDoc and not 'non-Javadoc'!"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format"
                      value="import edu\.umd\.cs\.findbugs\.annotations\.(CheckForNull|Nonnull|Nullable|CheckReturnValue);"/>
            <property name="message" value="Please use nullness annotations from javax.annotation."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import edu\.umd\.cs\.findbugs\.annotations\.OverrideMustInvoke;"/>
            <property name="message" value="Please use javax.annotation.OverridingMethodsMustInvokeSuper."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="import\s+edu\.umd\.cs\.findbugs\.annotations\.SuppressWarnings;"/>
            <property name="message"
                      value="Use edu.umd.cs.findbugs.annotations.SuppressWarnings always with full package name to avoid interference with java.lang.SuppressWarnings"/>
        </module>
    </module>
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CHECKSTYLE\.OFF\: ([\w\|]+)"/>
        <property name="onCommentFormat" value="CHECKSTYLE\.ON\: ([\w\|]+)"/>
        <property name="checkFormat" value="$1"/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${basedir}checkstyle/checkstyle_suppressions.xml"/>
    </module>
</module>
